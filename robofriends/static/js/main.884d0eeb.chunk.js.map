{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","username","email","className","src","alt","CardList","robots","map","robot","key","id","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","borderTop","borderBottom","height","children","App","useState","robotList","setRobotList","setSearchField","filteredRobots","filter","toLowerCase","includes","useEffect","fetch","then","response","json","users","length","event","target","value","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uQAceA,MAZf,YAA0C,IAA1BC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,SAAUC,EAAS,EAATA,MAC/B,OACC,yBAAKC,UAAU,oDACd,yBAAKC,IAAG,+BAA0BH,EAA1B,iBAAmDI,IAAI,UAC/D,yBAAKF,UAAU,MACd,wBAAIA,UAAU,OAAOH,GACrB,uBAAGG,UAAU,OAAOD,MCeTI,MApBf,YAA+B,IAAXC,EAAU,EAAVA,OACnB,OACC,6BAEEA,EAAOC,KAAI,SAAAC,GACV,OACC,kBAAC,EAAD,CACCC,IAAKD,EAAME,GACXA,GAAIF,EAAME,GACVX,KAAMS,EAAMT,KACZC,SAAUQ,EAAMR,SAChBC,MAAOO,EAAMP,aCCLU,MAbf,YAAkD,EAA7BC,YAA8B,IAAjBC,EAAgB,EAAhBA,aACjC,OACC,yBAAKX,UAAU,OACd,2BACCA,UAAU,kCACVY,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCCCI,MARf,SAAgBC,GACf,OACC,yBAAKC,MAAO,CAAEC,UAAW,SAAUC,UAAW,kBAAmBC,aAAc,kBAAmBC,OAAQ,UACxGL,EAAMM,WCqCKC,MApCf,WAAgB,IAAD,EACsBC,mBAAS,IAD/B,mBACNC,EADM,KACKC,EADL,OAE0BF,mBAAS,IAFnC,mBAENd,EAFM,KAEOiB,EAFP,KAQRC,EAAiBH,EAAUI,QAAO,SAAAvB,GACvC,OAAOA,EAAMT,KAAKiC,cAAcC,SAASrB,EAAYoB,kBAStD,OANAE,qBAAU,WACTC,MAAM,8CACJC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAIX,EAAaW,QAC3B,IAEMZ,EAAUa,OAQjB,yBAAKtC,UAAU,MACd,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWW,aAxBS,SAAC4B,GACvBZ,EAAeY,EAAMC,OAAOC,UAwB1B,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUrC,OAAQwB,MAVpB,yBAAK5B,UAAU,MACd,2CCfgB0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACR,kBAAC,EAAD,MACAC,SAASC,eAAe,SDwHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,MAAK,SAAAoB,GACjCA,EAAaC,kB","file":"static/js/main.884d0eeb.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Card({ name, username, email }) {\n\treturn (\n\t\t<div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n\t\t\t<img src={`https://robohash.org/${username}?size=200x200`} alt='robot' />\n\t\t\t<div className=\"tc\">\n\t\t\t\t<h2 className=\"mb2\">{name}</h2>\n\t\t\t\t<p className=\"ma1\">{email}</p>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nfunction CardList({ robots }) {\n\treturn (\n\t\t<div>\n\t\t\t{\n\t\t\t\trobots.map(robot => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Card \n\t\t\t\t\t\t\tkey={robot.id}\n\t\t\t\t\t\t\tid={robot.id} \n\t\t\t\t\t\t\tname={robot.name} \n\t\t\t\t\t\t\tusername={robot.username} \n\t\t\t\t\t\t\temail={robot.email} \n\t\t\t\t\t\t/>\n\t\t\t\t\t);\n\t\t\t\t})\n\t\t\t}\n\t\t</div>\n\t);\n}\n\nexport default CardList;","import React from 'react';\n\nfunction SearchBox({ searchField, searchChange }) {\n\treturn (\n\t\t<div className='pa2'>\n\t\t\t<input \n\t\t\t\tclassName='pa3 ba b=green bg-lightest-blue'\n\t\t\t\ttype='search' \n\t\t\t\tplaceholder='search robots' \n\t\t\t\tonChange={searchChange}\n\t\t\t/>\n\t\t</div>\n\t);\n}\n\nexport default SearchBox;","import React from 'react';\n\nfunction Scroll(props) {\n\treturn (\n\t\t<div style={{ overflowY: 'scroll', borderTop: '1px solid black', borderBottom: '1px solid black', height: '800px' }}>\n\t\t\t{props.children}\n\t\t</div>\n\t);\n}\n\nexport default Scroll;","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\n\nfunction App() {\n\tconst [ robotList, setRobotList ] = useState([]);\n\tconst [ searchField, setSearchField ] = useState('');\n\n\tconst onSearchChange = (event) => {\n\t\tsetSearchField(event.target.value);\n\t};\n\n\tconst filteredRobots = robotList.filter(robot => {\n\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\n\t});\n\n\tuseEffect(() => {\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t\t.then(response => response.json())\n\t\t\t.then(users => setRobotList(users));\n\t}, []);\n\n\treturn (!robotList.length) ?\n\t\t(\n\t\t\t<div className='tc'>\n\t\t\t\t<p>Loading...</p>\n\t\t\t</div>\n\t\t)\n\t\t:\n\t\t(\n\t\t\t<div className='tc'>\n\t\t\t\t<h1 className='f1'>RoboFriends</h1>\n\t\t\t\t<SearchBox searchChange={onSearchChange} />\n\t\t\t\t<Scroll>\n\t\t\t\t\t<CardList robots={filteredRobots} />\n\t\t\t\t</Scroll>\n\t\t\t</div>\n\t\t)\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'tachyons';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<App />, \n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}